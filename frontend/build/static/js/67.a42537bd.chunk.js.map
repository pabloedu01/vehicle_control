{"version":3,"sources":["pages/ServiceSchedule.js","components/PageTitle.js","services/api/index.js"],"names":["OrderList","api","useApi","history","useNavigate","useState","responsive","tableBodyHeight","tableBodyMaxHeight","setLoading","list","setList","options","filter","filterType","tableBodyWidth","onRowClick","row","index","goSchedule","onRowsDelete","e","deleteSelectedServiceScheduler","getList","a","getSchedules","result","msg","data","map","tasks","id","promised_date","technical_consultant","client","name","vehicle","plate","document","chassi","claims_service","alert","error","array","length","element","idServiceScheduler","id_ServiceScheduler","delSchedules","useEffect","breadCrumbItems","label","path","active","title","xs","Body","className","xl","variant","onClick","columns","sort","PageTitle","props","companyId","useParams","listProps","Item","href","hidden","insideCompany","company","item","apiCore","APICore","baseUrl","config","API_URL","request","method","endpoint","params","token","taketwo","loadingService","show","toLowerCase","fullUrl","body","queryString","URLSearchParams","toString","JSON","stringify","headers","Authorization","fetch","req","json","status","toastService","hide","getLoggedInUser","getToken","validateToken","login","logout","localStorage","removeItem","checkMe","signup","activateUser","getClients","getTechnicalConsultant","getVehicles","getVehicleBrand","getVehicleModel","getChecklistVersion","getVehicle","getClaims","getServices","getProducts"],"mappings":"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","file":"static/js/67.a42537bd.chunk.js","sourcesContent":["// @flow\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, Col,  Row} from 'react-bootstrap';\nimport useApi from '../services/api';\nimport { useNavigate } from 'react-router-dom';\n\n// component\nimport PageTitle from '../components/PageTitle';\nimport MUIDataTable from 'mui-datatables';\n\nconst OrderList = () => {\n    const api = useApi();\n    const history = useNavigate();\n    const [responsive, setResponsive] = useState('vertical');\n    const [tableBodyHeight, setTableBodyHeight] = useState('400px');\n    const [tableBodyMaxHeight, setTableBodyMaxHeight] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [list, setList] = useState([]);\n\n    const fields = [\n        {\n            label: 'cod_agenda',\n            name: 'id',\n            options: {\n                filter: true,\n                sort: true,\n            },\n        },\n        {\n            label: 'Data do Agendamento',\n            name: 'promised_date',\n            options: {\n                filter: true,\n                sort: true,\n            },\n        },\n        {\n            label: 'Consultor',\n            name: 'technical_consultant',\n            options: {\n                filter: true,\n                sort: true,\n            },\n        },\n        {\n            label: 'Cliente',\n            name: 'client',\n            options: {\n                filter: true,\n                sort: true,\n            },\n        },\n        {\n            label: 'Veículo',\n            name: 'vehicle',\n            options: {\n                filter: true,\n                sort: true,\n            },\n        },\n        {\n            label: 'Placa',\n            name: 'plate',\n            options: {\n                filter: true,\n                sort: true,\n            },\n        },\n        {\n            label: 'Status',\n            name: 'claims_service',\n            options: {\n                filter: false,\n                sort: false,\n            },\n        },\n        {\n            label: 'Chassi',\n            name: 'chassi',\n            options: {\n                filter: false,\n                sort: false,\n            },\n        },\n        {\n            label: 'Ações',\n            name: 'actions',\n            options: {\n                filter: false,\n                sort: false,\n            },\n        },\n    ];\n\n    const options = {\n        filter: true,\n        filterType: 'dropdown',\n        responsive,\n        tableBodyWidth: '100%',\n        tableBodyHeight,\n        tableBodyMaxHeight,\n        onRowClick: (row, index) => {\n            goSchedule(row[0]);\n        },\n        onRowsDelete: (e) => deleteSelectedServiceScheduler(e),\n    };\n\n \n        \n    const getList = async () => {\n        setLoading(true);\n        const result = await api.getSchedules();\n     \n        setLoading(false);\n        if (result.msg == \"¡Success!\") {\n            let data = result.data.map((tasks) => ({\n                id: tasks.id,\n                promised_date:  tasks.promised_date, \n                technical_consultant:'',\n                client: tasks.client.name,\n                vehicle: tasks.vehicle.name,\n                plate: tasks.client.document,\n                chassi: tasks.vehicle.document,\n                claims_service: <><Button>teste</Button></>\n            }));\n            setList(data);\n        } else {\n            alert(result.error);\n        }\n    };\n\n    const deleteSelectedServiceScheduler = async (e) => {\n        let array = e.data;\n        for (let index = 0; index < array.length; index++) {\n            let element = array[index].index;\n            let idServiceScheduler = list[element].id_ServiceScheduler;\n            await api.delSchedules(idServiceScheduler);\n        }\n    };\n\n    const goSchedule = (id_ServiceScheduler) => {\n        const id = id_ServiceScheduler;\n        history(`/apps/schedule/detail?id=${id}&type=edit`);\n    };\n \n    const newSchedule = () => {\n        history(`/apps/schedule/detail?id=null&type=new`);\n    };\n    useEffect(() => {\n        getList();\n    }, []);\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: 'Service Scheduler', path: '/apps/crm/orders' },\n                    { label: 'Service Scheduler List', path: '/apps/crm/orders', active: true },\n                ]}\n                title={'Service Scheduler List'}\n            />\n\n            <Row>\n                <Col xs={12}>\n                    <Card>\n                        <Card.Body>\n                            <Row className=\"mb-2\">\n                                <Col xl={8}>\n                                    <Row className=\"gy-2 gx-2 align-items-center justify-content-xl-start justify-content-between\"></Row>\n                                </Col>\n                                <Col xl={4}>\n                                    <div className=\"text-xl-end mt-xl-0 mt-2\">\n                                        <Button variant=\"danger\" className=\"mb-2 me-2\" onClick={() => newSchedule()}>\n                                            <i className=\"mdi mdi-basket me-1\"></i> New Service Scheduler\n                                        </Button>\n                                    </div>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <MUIDataTable data={list} columns={fields} options={options} />\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default OrderList;\n","// @flow\nimport React from 'react';\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\nimport {useParams} from \"react-router-dom\";\n\ntype BreadcrumbItems = {\n    label: string,\n    path: string,\n    active?: boolean,\n};\n\ntype PageTitleProps = {\n    breadCrumbItems: Array<BreadcrumbItems>,\n    title: string,\n    company?: any,\n    insideCompany?: boolean\n};\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\n    const {companyId} = useParams();\n\n    return (\n        <Row>\n            <Col>\n                <div className=\"page-title-box\">\n                    <div className=\"page-title-right\">\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\n                            <Breadcrumb.Item href=\"/panel/companies\">TUNAP</Breadcrumb.Item>\n                            <Breadcrumb.Item hidden={props.insideCompany === false} href={`/panel/company/${props.company?.id || companyId}/dashboard`}>{props.company?.name || 'Empresa'}</Breadcrumb.Item>\n\n                            {props.breadCrumbItems.map((item, index) => {\n                                return item.active ? (\n                                    <Breadcrumb.Item active key={index}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                ) : (\n                                    <Breadcrumb.Item key={index} href={props.insideCompany === false ? item.path : `/panel/company/${props.company?.id || companyId}${item.path}`}>\n                                        {item.label}\n                                    </Breadcrumb.Item>\n                                );\n                            })}\n                        </Breadcrumb>\n                    </div>\n                    <h4 className=\"page-title\">{props.title}</h4>\n                </div>\n            </Col>\n        </Row>\n    );\n};\n\nexport default PageTitle;\n","// const baseUrl = 'https://tunap-intranet-backend.herokuapp.com/api'; //\nimport config from '../../config';\nimport {toastService} from \"../../services/toast\";\nimport {loadingService} from \"../loading\";\nimport {APICore} from \"../../helpers/api/apiCore\";\n\nconst apiCore = new APICore();\n\nconst baseUrl = config.API_URL;\n\nconst request = async (method, endpoint, params, token = null, taketwo = null) => {\n    try {\n        loadingService.show();\n        method = method.toLowerCase();\n        let fullUrl = `${baseUrl}${endpoint}`;\n        let body = null;\n        switch (method) {\n            case 'get':\n                let queryString = new URLSearchParams(params).toString();\n                fullUrl += `?${queryString}`;\n                break;\n            case 'post':\n            case 'put':\n            case 'delete':\n                body = JSON.stringify(params);\n                break;\n        }\n        let headers;\n        if (taketwo) {\n            headers = { 'Content-Type': 'application/pdf' };\n        } else {\n            headers = { 'Content-Type': 'application/json' };\n        }\n\n        if (token) {\n            headers.Authorization = `Bearer ${token}`;\n        }\n        let req = await fetch(fullUrl, { method, headers, body });\n\n        let json = await req.json();\n\n        json['httpCode'] = req.status;\n\n        switch(req.status){\n            case 201:\n                toastService.show('success','Salvo com sucesso.');\n                break;\n            case 500:\n                toastService.show('error',json.msg || 'Ha ocorreu um erro interno.');\n                break;\n            case 400:\n                toastService.show('error',json.msg || 'Dados inválidos.');\n                break;\n            case 401:\n                toastService.show('error',json.msg || 'Não autorizado.');\n                break;\n            case 404:\n                toastService.show('error',json.msg || 'Não encontrado.');\n                break;\n            default:\n                break;\n        }\n\n        loadingService.hide();\n\n        return json;\n    } catch (error) {\n        loadingService.hide();\n        return { error: 'Erro de Conexão com API' };\n    }\n};\n\nexport default () => {\n    const token = apiCore.getLoggedInUser()?.token || null;\n\n    return {\n        // funções basicas de login\n        getToken: () => {\n            return apiCore.getLoggedInUser();\n        },\n        validateToken: async () => {\n            let json = await request('post', '/auth/check-token', {}, token);\n            return json;\n        },\n        login: async (data) => {\n           \n            let json = await request('post', '/login', data, {});\n            return json;\n        },\n        logout: async () => {\n            let json = await request('post', '/logout', {}, token);\n            localStorage.removeItem('token');\n            return json;\n        },\n        checkMe: async () => {\n            let json = await request('post', '/auth/me', {}, token);\n            return json;\n        },\n        signup: async (data) => {\n            let json = await request('post', '/register', data, {});\n            return json;\n        },\n        activateUser: async (data) => {\n            let json = await request('post', '/activate-user', data, {});\n            return json;\n        },\n        getSchedules: async () => {\n            let json = await request('get', '/service-schedule' ,\"company_id=1\", token);\n            return json;\n        },\n        delSchedules: async (id) => {\n            let json = await request('get', `/service-schedule/${id}` , {}, token);\n            return json;\n        },\n        ///api/client?company_id=1\n        getClients: async () => {\n            let json = await request('get', '/client' ,\"company_id=1\", token);\n            return json;\n        },\n        ///api/technical-consultant?company_id=1\n        getTechnicalConsultant: async () => {\n            let json = await request('get', '/technical-consultant' ,\"company_id=1\", token);\n            return json;\n        },\n        ///api/vehicle?company_id=1\n        getVehicles: async () => {\n            let json = await request('get', '/vehicle' ,\"company_id=1\", token);\n            return json;\n        },\n        ///api/vehicle-brand?company_id=1\n        getVehicleBrand: async () => {\n            let json = await request('get', '/vehicle-brand' ,\"company_id=1\", token);\n            return json;\n        },\n        ///api/vehicle-model?brand_id=1\n        getVehicleModel: async () => {\n            let json = await request('get', `/vehicle-model` ,\"brand_id=1\", token);\n            return json;\n        },\n        ///api/checklist-version?brand_id=1\n        getChecklistVersion: async (id) => {\n            let json = await request('get', `/checklist-version` ,\"brand_id=1\", token);\n            return json;\n        },\n       ///api/vehicle?model_id=1\n        getVehicle: async () => {\n            let json = await request('get', `/vehicle` ,\"model_id=1\", token);\n            return json;\n        },\n        //Fecthc route: /api/claim-service?company_id=1\n        getClaims: async () => {\n            let json = await request('get', `/claim-service` ,\"company_id=1\", token);\n            return json;\n        },\n        // get /api/service?company_id=1\n        getServices: async () => {\n            let json = await request('get', `/service` ,\"company_id=1\", token);\n            return json;\n        },\n        getProducts: async () => {\n            let json = await request('get', `/product` ,\"company_id=1\", token);\n            return json;\n        }\n\n        \n\n    };\n};\n"],"sourceRoot":""}